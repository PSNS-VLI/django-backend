# Generated by Django 2.2 on 2023-02-04 18:55

import ckeditor.fields
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='AnonmyousQQ',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('qq', models.IntegerField(verbose_name='QQ号')),
                ('name', models.CharField(blank=True, max_length=100, null=True, verbose_name='QQ昵称')),
                ('convert_name', ckeditor.fields.RichTextField(blank=True, null=True, verbose_name='格式化昵称')),
            ],
            options={
                'verbose_name': 'QQ用户',
                'verbose_name_plural': 'QQ用户',
            },
        ),
        migrations.CreateModel(
            name='WeappUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('openid', models.CharField(max_length=28, unique=True, verbose_name='openid')),
                ('unionid', models.CharField(blank=True, max_length=29, null=True, verbose_name='unionid')),
                ('permission', models.IntegerField(default=0, verbose_name='权限')),
                ('nickName', models.CharField(blank=True, max_length=100, null=True, verbose_name='微信昵称')),
                ('name', models.CharField(blank=True, default='', max_length=50, null=True, verbose_name='姓名')),
                ('gender', models.SmallIntegerField(blank=True, default=0, null=True, verbose_name='性别')),
                ('avatarUrl', models.CharField(blank=True, max_length=150, null=True, verbose_name='微信头像')),
                ('mobile', models.CharField(blank=True, max_length=11, null=True, verbose_name='手机号')),
                ('qq', models.CharField(blank=True, max_length=16, null=True, verbose_name='QQ号')),
                ('school', models.CharField(blank=True, max_length=20, null=True, verbose_name='学校')),
                ('academy', models.CharField(blank=True, max_length=20, null=True, verbose_name='学院')),
                ('major', models.CharField(blank=True, max_length=20, null=True, verbose_name='专业')),
                ('grade', models.CharField(blank=True, max_length=10, null=True, verbose_name='班级')),
                ('apartment', models.CharField(blank=True, max_length=5, null=True, verbose_name='宿舍楼')),
                ('floor', models.CharField(blank=True, max_length=2, null=True, verbose_name='楼层')),
                ('dormitoryID', models.CharField(blank=True, max_length=5, null=True, verbose_name='宿舍号')),
                ('studentID', models.CharField(blank=True, max_length=12, null=True, verbose_name='学号')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '微信用户',
                'verbose_name_plural': '微信用户',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
